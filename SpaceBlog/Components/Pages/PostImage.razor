@rendermode InteractiveServer

@page "/edit"

@using System
@using System.IO
@using System.Net.Http.Headers
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging

@inject IHttpClientFactory ClientFactory

<PageTitle>Adicionar Publicação - SpaceBlog</PageTitle>

<div class="content-post-image">

	<h3>Adicionar publicação</h3>

	<form method="post" @formname="add-picture-form" @onsubmit="SendImage" class="post-image-form">
		<AntiforgeryToken />

		<InputFile required OnChange="OnInputFileChange" />

		<input type="text" required @bind-value="PostText" />

		<button class="sb-btn" type="submit">Enviar</button>
	</form>

	@if (isLoading)
	{
		<p>Loading...</p>
	}

</div>

@code {
	string? PostText;
	private IBrowserFile? loadedFile;
	private long maxFileSize = 1024 * 1024 * 150;
	private bool isLoading;
	MultipartFormDataContent content = new();

	void OnInputFileChange(InputFileChangeEventArgs e)
	{
		loadedFile = e.File;
		Console.WriteLine(loadedFile.Name);
	}

	async Task SendImage()
	{
		using var content = new MultipartFormDataContent();

		var fileContent = new StreamContent(loadedFile!.OpenReadStream(maxFileSize));

		fileContent.Headers.ContentType = new MediaTypeHeaderValue(loadedFile.ContentType);

		content.Add(
			name: "files",
			content: fileContent,
			fileName: loadedFile.Name
		);

		var client = ClientFactory.CreateClient();

		var response = await client.PostAsync(
			"https://localhost:7014/Post/AddFile",
			content
		);
	}

}
