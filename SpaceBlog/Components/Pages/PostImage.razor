@rendermode InteractiveServer

@page "/edit"

@using System
@using System.IO
@using System.Net.Http.Headers
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging

@inject IHttpClientFactory ClientFactory

<PageTitle>Adicionar Publicação - SpaceBlog</PageTitle>

<div class="content-post-image">

	<h3>Adicionar publicação</h3>


	<div class="post-image-form">
		<form method="post" @formname="add-picture-form" @onsubmit="SendContent" class="post-image-form-content">
			<AntiforgeryToken />

			<div class="content-post-image__fields">
				<label for="input-test">Escolha um arquivo:</label>
				<InputFile id="input-test" class="sb-input-file" required OnChange="OnInputFileChange" />
			</div>

			<div class="content-post-image__fields">
				<label>Descrição do texto:</label>
				<input type="text" required @bind-value="PostText" class="content-post-image__input-text" placeholder="Digite a descrição aqui" />
			</div>

			<button class="sb-btn" type="submit">Enviar</button>
		</form>
	</div>

	@if (isLoading)
	{
		<p>Enviando...</p>
	}

</div>

@code {
	string? PostText;
	private IBrowserFile? loadedFile;
	private long maxFileSize = 1024 * 1024 * 150;
	private bool isLoading;

	void OnInputFileChange(InputFileChangeEventArgs e)
	{
		loadedFile = e.File;
	}

	async Task SendContent()
	{
		isLoading = true;
		using var content = new MultipartFormDataContent();

		var fileContent = new StreamContent(loadedFile!.OpenReadStream(maxFileSize));

		fileContent.Headers.ContentType = new MediaTypeHeaderValue(loadedFile.ContentType);

		content.Add(
			name: "files",
			content: fileContent,
			fileName: loadedFile.Name
		);


		content.Add(
			name: "texto que vem",
			content: new StringContent(PostText ?? "Sem descrição")
		);

		var client = ClientFactory.CreateClient();

		var response = await client.PostAsync(
			"https://localhost:7014/Post/AddFile",
			content
		);
		isLoading = false;
	}

}
